Caderno de Anotações Bootcamp Philips

CURSO DE PENSAMENTO COMPUTACIONAL

Capacidade de abstração de objetos, decomposição de problemas, reconhecimento de padrões e algoritmos. 
Estruturas de dados e algoritmos – Estudar os mais adequados para cada tipo de situação. Percebe-se, então, que as duas disciplinas são essenciais. 
Como construir um algoritmo?
1-Compreensão do problema 
2-Definição de dados de entrada
3-Definir processamento
4-Definir dados de saída
5-Utilizar um método de construção
6-Teste e diagnóstico
Metodos de construção
1-Narrativa – utilização da linguagem natural
2-Fluxograma – Utilização de símbolos pré-definidos
3-Pseudocódigo – Portugal
Busca Binária – 
Passo 1 – Ordenar o vetor
Passo 2 – Módulo de L/2
Passo 3 – Acessar estrutura
Passo 4 – Comparar valores
Passo 5 – Repita até encontrar o número
Passo 6 – Imprima “Busca bem sucedida”

Links para verificar depois
https://www.cs.cmu.edu/~CompThink/resources/TheLinkWing.pdf
https://ubiquity.acm.org/article.cfm?id=1922682
https://www.youtube.com/watch?v=YVEUOHw3Qb8

CURSO DE GITHUB

Comandos

git clone link -> acrescenta o projeto na maquina

git add . -> acrescenta qualquer arquivo novo no repositório local
git commit -m "informação sobre a mudança" -> coloca o arquivo no repositório local e o atualiza. 

git push origin main - coloca todos os commits e alterações na nuvem(github)


CURSO DE INTRODUÇÃO A HTML 5 e CSS3

HTML - Criado por Tim Berner Lee

Estrutura básica
<!DOCTYPE html>
<html>
	<head>
		<meta>
		<title> </title>
	</head>
	<body>
	</body>
</html>

Criação de uma estrutura básica de um site. 

Semântica de uma pagina html

<section>
<header>
<article>
<aside>
<footer>
<h1> - <h6>

Exemplo

<!DOCTYPE html>
<html>
	<head>
		<meta>
		<title> </title>
	</head>
	<body>
		<header>
			<h1> Titulo </h1>
		</header>
		<section>
			<header>
			<h2> Titulo </h2>
			</header>
		</section>
		<article>
			<header>
			<h3> Titulo </h3>
			</header>
		</article>
		<footer> </footer>
	</body>
</html>



textos e links 
<a> Link</a>
<a href="linkedin.com/in/vilaboim">Linkedin</a>
<a href="mailto:lucas@vilaboim.com">E-mail</a>

<a href="link" target="_blank">Link</a> O target serve para indicar como o link será aberto. Nesse caso o link será aberto em uma nova aba.



<img src="caminho da imagem">
<img src="" alt="texto descrevendo a imagem quando ela não aparece">

Site para baixar fotos - Unsplash


Listas 

<ul> - a ordem não é importante

<ol> - a ordem é importante
<li> - são os elementos da lista

Exemplo de lista de contatos
<ul> 
<li> 
contato 1
</li>
<li>
contato 2
</li>
<li>
contato 3
</li>
</ul>


INTRODUÇÃO AO CSS
CSS 3
Regras de estilos ou grupos de

Seletores - elementos html 
ID x Class
No CSS, o id é precedido por um hash #header { padding: 15px;}. Já o class é precesido de um ponto .header{padding: 10px;}
Um id só pode ser utilizado uma vez na pagina. 

Como adicionar um arquivo css. 
primeiro se cria um arquivo com o nome style.css 
Depois no head colocamos um link para o arquivo 
<link rel="stylesheet" href="caminho do arquivo">

Box model
margin  - espaçamento entre os elementos
border - circulam o pading e o conteudo. 
padding - espaçamento que fica entre a borda e o conteudo. 
conteudo - o conteudo.

CSS 3
Definição e seletores
Após a criação do HTML a necessidade de formatar as páginas ficou evidente, assim, em 1996, foi criada a linguagem de estilo que conhecemos por CSS.

A sintaxe é bem simples e pode ser explicada com a frase "você cria regras de estilo para elementos ou grupos de elementos".

Vamos usar um elemento HTML que vimos anteriormente, a âncora <a>, para exemplificar.

Uma regra CSS é representada por um seletor ou um grupo de seletores, no nosso caso é o <a>, então dentro de um par de chaves adicionamos as declarações, no exemplo acima estamos alterando cor e tamanho da fonte dessa âncora, as declarações são formadas por uma propriedade e um valor.

Percebam que podemos colocar vários seletores em uma regra separando-os por vírgula.

E há um último detalhe nesse exemplo: a pseudo-classe. Elementos HTML sofrem alterações causadas pela interação do usuário, como mover o mouse por cima ou clicar nesse elemento.

O a:hover do exemplo significa que a âncora também terá essa aparência quando o usuário passar o mouse por cima de um hyperlink.

 

ID x Classe
No exemplo anterior criamos uma regra que altera um elemento HTML diretamente, mas isso significa que todos os elementos <a> ficarão com aquela aparência, e normalmente temos sites mais complexos que precisam de várias regras diferentes para elementos iguais.

Para ficar mais tangível vamos relembrar um pouco o site que começamos a fazer no módulo passado, ele tinha vários elementos header, mas não vamos querer que o header principal tenha a mesma formatação que o header de uma postagem, é aí que entram os IDs e Classes.

O seletor que vimos no primeiro exemplo é um seletor de tipo, pois ele representa um elemento HTML, e com IDs e Classes podemos representar qualquer tipo de elemento mas há algumas diferenças entre eles:

ID: é representado pelo símbolo # (hash) seguido de um nome para esse ID.

Classe: a classe é representada de forma parecida do ID, mas é precedida por um ponto em vez do hash.

E a diferença mais importante entre eles é a forma como devem ser usados: o ID só pode ser usado uma vez em uma página HTML enquanto a classe não tem restrições.

 

Exercício
Vamos adicionar algumas classes no nosso site e alterar alguns elementos, mas antes precisamos adicionar um arquivo CSS a nossa página.

No módulo de HTML descobrimos que podemos adicionar CSS de duas formas, com o elemento style, e assim suas regras ficarão no arquivo HTML, ou podemos criar um arquivo CSS e adicioná-lo na página através do elemento link, e é essa forma que usaremos.

Crie um elemento link dentro do head do seu arquivo e adicione os atributos rel="stylesheet" e href="style.css", o rel denota o tipo de arquivo que estamos incluindo na página e o href é o caminho para o arquivo. E na mesma pasta do arquivo HTML crie um arquivo chamado style.css.

Agora sim vamos ao CSS, adicione um ID #title ao h1 da página, pois queremos que ele seja único, e depois adicione as classes .subtitle e .post_title ao h2 e h3, respectivamente.

No arquivo CSS vamos mudar a cor desses três títulos, e depois alterar o tamanho da fonte do título da postagem.

 

Box-model
Quando estamos criando o layout de um site o navegador representa cada elemento HTML  como uma caixa retangular, isso é o box-model. E com CSS nós alteramos a aparência dessa caixa (largura, altura, cor de fundo, etc.). Essa caixa é composta por 4 áreas: o conteúdo, o padding, a borda e a margem.

As margens (margin) são espaçamentos entre elementos;
As bordas (border) ;
O padding é um espaçamento entre as bordas e o conteúdo, a diferença para as margens é que declarações de imagem de fundo funcionam nele;
O conteúdo (content) é o que o seu bloco representa, um texto, uma imagem, um vídeo;
 

Exercício
Para enxergamos o box-model vamos adicionar cores e bordas a alguns elementos.

Primeiro adicionaremos uma cor de fundo para a visualização ficar mais fácil, usaremos a propriedade background com o valor #fcfcfc no elemento body.

Depois vamos adicionar uma classe ao <article>, pode ser .post, e então vamos colocar a cor branca de fundo com a propriedade background e o valor #FFF. Agora conseguimos enxergar o content do box-model.

Vamos adicionar um padding de 10 pixels neste mesmo article. Perceberam o espaçamento que surgiu em volta do nosso conteúdo?

Agora adicionamos um borda mais escura a ele com a propriedade border. Vou falar mais detalhadamente sobre border mais a frente, mas por enquanto vamos deixar essa borda com 3 pixels de largura, o contorno sólido e a cor azul.

E por último vamos adicionar uma margem do lado de fora do post com a propriedade margin e o valor 10 pixels.

E agora inspecionando o nosso elemento conseguimos todas aquelas camadas citadas antes: o conteúdo em azul, o padding em verde, as bordas em marrom e as margens em laranja.

E já que começamos a falar sobre bordas e cor de fundo, no próximo vídeo vamos nos aprofundar nessas propriedades.

 

Estilizando elementos
Agora que entendemos o box-model podemos focar em deixar nosso site mais bonito, então vamos repassar pelas propriedades já citadas:

Padding e Margin
Anteriormente usamos o padding e o margin da forma mais básica, com apenas um valor, mas eles são mais poderosos que isso. Se quisermos atribuir tamanhos diferentes para cada lado do box nós podemos, e vamos ver três formas de fazer isso.

 

A primeira é colocando um valor para as partes superior e inferior e depois para os lados esquerdo e direito.

O valor de 10 pixels se refere ao eixo Y, ou partes superior e inferior, e os 5 pixels se referem aos lados esquerdo e direito.

 

A segunda forma é dando valores para cada lado do box.

Então começamos pelo topo com 15 pixels, passamos o lado direito com 10 pixels, depois para a parte inferior com 5 pixels e por último o lado esquerdo com 0, e sempre nessa ordem.

Uma boa dica também é que quando o valor for 0 não precisamos não precisamos colocar a unidade.

 

A terceira forma é com as propriedades específicas para cada lado, até agora tínhamos visto atalhos para essas propriedades.

Essa opção é mais usada quando temos o mesmo valor para 3 lados, e o quarto precisa ter um valor diferente, então usamos o padding com apenas um valor e uma dessas opções para representar o lado diferente.

 

Background
A propriedade background também é um atalho para várias propriedades, mas isso vocês podem absorver aos poucos, e uma boa opção de leitura é a documentação do MDN.

Por enquanto veremos apenas como mudar a cor de fundo.

 

E aqui temos 3 formas de colocar uma cor de fundo, e ainda existem outras.

A primeira é pelo nome da cor em inglês, a segunda é pelo código hexadecimal e a terceira é usando apenas o atalho background.

 

Border
Vimos que a propriedade border pode ter 3 valores: a largura, a cor e o estilo, mas existem algumas particularidades nisso.

A largura pode ser usada com várias unidades, como px, em e mm. A cor pode ser atribuída pelo nome ou por um código hexadecimal, assim como fizemos com o background, e o estilo é representada por palavras-chave, vamos ver algumas delas:

 

solid: mostra uma borda simples e reta;

dotted: são bolinhas com um pequeno espaçamento entre elas;

dashed: forma uma linha tracejada.

E aproveitando que mostrei esse código temos que falar sobre como separar a estilização dos lados de uma borda.

E se você não quiser usar a propriedade border existem as propriedade específicas para cada aspecto de uma borda, são elas border-width para a largura, border-color para a cor e border-style para o estilo.

Aqui temos o mesmo código anterior de duas formas diferentes, a primeira com o atalho border e a segunda com cada propriedade específica.

E depois disso podemos juntar os lados com os aspectos de uma borda e criar uma regra mais específica ainda.

 

Border-radius

E a última propriedade é o border-radius, ele permite arredondar os cantos de um elemento. Podemos usar várias unidades, mas as mais comuns são os pixels e a porcentagem.

Colocando apenas um valor mudamos todos os cantos do elemento, mas seguindo aquela mesma ordem que vimos no padding e margin - topo, direita, inferior e esquerda -  conseguimos alterar cada canto separadamente.

 
Exercício
Neste exercício vamos deixar o nosso site um pouco mais bonito usando as propriedades que acabamos de ver.

Vamos aumentar o padding para 15 pixels e colocar uma margem de também de 15 pixels só na parte de baixo do post.

Quando olhamos para os textos percebemos que os espaçamentos estão diferentes do restante do post, então vamos padronizar isso.

No título do post vamos retirar todas as margens para depois colocar apenas uma margem inferior de 15 pixels. E no corpo do post precisamos adicionar uma classe e remover todas as margens para depois adicionar uma margem superior de 15 pixels.

Podemos manter o background branco, mas vamos diminuir a largura das bordas para 2 pixels e mudar a cor para a mesma do texto - #505050 - e por último adicionaremos um border-radius, 5 pixels são suficientes. Podemos adicionar esse mesmo de valor de border-radius na imagem, para isso vamos acrescentar uma class a imagem antes.

 

Estilizando textos
Já sabemos que podemos mudar cor e tamanho de algumas fontes, e agora vamos nos aprofundar nisso.

 

font-family
Com o font-family podemos alterar a fonte dos nossos textos, como uma fonte da internet ou uma que esteja instalada no nosso computador, mas vamos nos ater às fontes seguras, chamadas de web safe fonts.

Essas fontes são chamadas assim pois são encontradas em quases todos os sistemas e podem ser usadas sem preocupação.

 

font-size
O font-size nos ajuda a mudar o tamanho do texto, existem algumas unidades de medida para ele mas por enquanto os pixels são suficientes para nós.

 

font-style
Usamos o font-style para tornar um texto itálico, na maioria das vezes você usará apenas o valor italic para ele, mas se precisar tirar o itálico de um texto você pode usar o valor normal.

 border-radius - altera a forma da borda. 


Para estilizar os elementos da pagina html, basta declarar se o elemento é uma classe ou id. <tag class="" ou id="">. depois colocamos o arquivo css no metadados. E por fim dentro do proprio arquivo css estilizamos o elemento usando . ou # e o nome da classe/id. 
font-family: fonte; 
font-size: 18px;
font-style: normal/italic
font-weight: normal/bold
text-transform: uppercase/lowecase/cappitelize
tex-decoration: underline/overline/etc


DIMENSÃO/ALINHAMENTO

width
height
Max-width
Max-height
Margin
Text align(left, right, center justify)



CURSO DE BOOTSTRAP



Framework para desenvolvimento de sites responsivos
O Botstrap divide a tela em um container e 12 colunas.
Bootstrap seria, portanto, um conjunto de estilos para classes e elementos.  

Utilizando bootstrap

1)Baixar o Bootstrap no site getbootstrap.com
2)Descompactá-lo na pasta do site. 
3)Criar um link de referencia ao arquivo bootstrap.mini.css no metadados do site (gead)
4)Procurar algum exemplo de elemento do site a ser construido na documentação do site do bootstrap.
5) Ir colando o código da documentação. 

OBS.: Site para selecionar o Código Hexadecimal de cores: https://htmlcolors.com/

Para personalizar os elementos, basta ir fazendo a referenciação no style.css, com a identificação dos id e classes a que a alteração é aplicada.m 


CURSO DE FLEXBOX


Foi projetado como um modelo de layout unidimensional e como um método que pode oferecer distribuição de espaço entre itens em uma interface e recursos de alinhamento. 

Flex Container
- é a tag que envolve os itens, será nela que iremos aplicar a propriedade "display: flex". Transforma todos os itens filhos em flex itens. 
Propriedades relacionadas: 
- display; flex-direction; flex-wrap; flex-flow; justify-content; align-items; align-content. 

Flex Item - São os elementos filhos diretos do Flex Container. E também podem se tornar Flex Container. 
Propriedades relacionadas: 
- flex-grow; flax-basis; flex-shrink; flex; order; align-self


FUNDAMENTOS DO FLEXBOX
PARTE 01 - FLEX CONTAINER
Display Flex 
Quando tornamos determinada tag em um elemento do tipo flex container, automaticamente todos os seus filhos diretos também se tornam flex itens. 

Flex Direction
É a propriedade que estabelece o eixo principal do container, definindo assim a direção que os flex itens são colocados no flex container.
row (padrão); à direção do txto, esquerda para direita. 
row-reverse: sentido oposto à direção do txto 
column: ordenação de ima para baixo, em coluna única. 
column-reverse: ordenação inversa em coluna única, de baixo para cima. 

FLEX-WRAP - 
É a propriedade que define se os itens devem ou não quebrar a linha. 
Por padrão eles não quebram linhas, isso faz com que os flex itens sejam compactados além do limite de cinonteúdo.

Nowrap: é o padrão, não permite a quebra de linha. quando os itens passam dos limites da linha eles começam a vazar
Wrap: permite a quebra de linha assim que um dos flex itens não puder mais ser compactado. 
wrap-reverse: permite a quebra de linha, porém na direção contrária da linha, acima. 
Obs: interessante quando formos criar um album de fotos e queremos que os mais recentes aparecam la em cima e os mais antigos lá embaixo.

FLEX-FLOW
É um atalho para as propriedades flex-direction e flex-wrap. 
O seu uso não é tão comum, visto que, quando mudamos o flex-direction para column, mantemos o padrão do flex-wrap que é nowrap

JUSTIFY CONTENT
 
Essa propriedade vai se encarregar de alinhar os itens dentro do container de acordo com a direção pretendida e tratar da distribuição de espaçamento entre eles. 
OBS.: caso seus itens esteja ocupando 100% de todo o container, ela não se aplica. 


As variações

flex-start: início do container. 
flex-end: final do container. 
center: ao centro do container. 
space-between: cria um espaçamento igual entre os elementos. 
space-around: os espaçamentos do meio são duas vezes maiores que o inicial e final. 


Align Itens
Trata do alinhamento dos flex itens de acordo com o eixo do container
O alinhamento é diferente para quando os itens estão em colunas ou linhas. 
Permite o alinhamento central no eixo vertical. 

Tipos de alinhamentos 
center: alinhamento dos itens ao centro
stretch: padrão, e os flex itens crescem igualmente. 
flex-start: alinhamento dos itens no início
flex-end: alinhamento dos itens no final;
baseline: alinhamento de acordo com a linha base da tipografia dos itens. 



ALIGN-CONTENT

Precisamos que: 
- O container utilize quebra de linhas
- A altura do container seja maior que a soma das linhas dos itens. 

Tipos de alinhamento
- center: alinhamento dos itens ao centro
-stretch: é o padrão e os flex itens crescem igualmente
-flex-start: alinhamento dos itens no final; 
-space-between: cria um espaçamento igual entre os elementos
-space-around: os espaçamentos do meio são duas vezes maiores que o inicial e final

FLEX GROW

Define a proporcionalidade de crescimento dos itens, respeitando o tamanho de seus conteúdos internos. 
OBS.: não irá funcionar caso tenhamos adicionado justify-content ao nosso flex container. 


FLEX-BASIS
É a propriedade que estabelece o tamanho inicial do item antes da distribuição de espaço restante dentro dele, usando como base o conteúdo interno disposto. 

Valores possíveis

auto: caso o item não tenha tamanho pré-definido, este será proporcional ao conteúdo do item. 
px, %, em, ...: são valores exatos previamente definidos
0 (zero): terá relação com a definição do flex-grow.

FLEX-SHRINK 

É a propriedade que estabelece a capacidade de redução ou compressão do tamanho de um item.

FLEX 
Esta propriedade é um atalho ou abreviação de escrita para as propriedades: grow, shrink e basis. 
Ex.: flex: 1 0 auto; (significa que o grow é 1, o shrink é 0 e o basis é auto. 

ORDER 
Propriedade relacionada à ordenação dos itens

ALIGN SELF
É a propriedade que estabelece o alinhamento de modo individual sobre um determinado item. 

Valores possíveis:
auto: valor padrão, irá respeitar a definição de align-items do container
flex-start: ao início do container
flex-end: ao final do container
center: relativo ao centro de acordo com o eixo. 
stretch: ocupa todo o espaço relativo
baseline: utiliza a linha base da tipografia

1) Javascript for dummys
3) c
2) Python
MAXMILLIAN SCHWARZMULLER
PYTHON AND 
AWS CERTIFICATION - CLOUD COMPUTING - Duas certificações a serem conseguidas - SOLUCTIONS ARCHITECT E DEVELOPER 


CURSO DE JAVASCRIPT

SINTAXE BÁSICA JAVASCRIPT 

O que é o Javascript?
É uma linguagem de programação de alto nivel, que integra o desenvolvimento de apps e paginas web.
Para que serve?
Para criar scripts dinamicos que realizam a interação de apps com as paginas web. 
Onde usar?
No desenvolvimento de paginas web. 

Boas praticas:
Externar o arquivo script
deixa-lo ao final do body
Como externar?
<script src="script.js"></script>

Como funciona a tipagem em Javascript?
O que são variáveis e como declarar?
Quais as diferenças entre atribuição, comparação e comparação idêntica?
Operadores aritméticos relacionais e lógicos. 
A tipagem funciona como uma regra de uso de dados, quanto mais forte for a tipagem, mas obrigatória é a declaração do tipo de dado. 
A tipagem em Javascript é fraca, a declaração dos dados acontece de modo dinamico. 
Ex.: ao criarmos uma variavel em aspas, o Javascript já converte para string. 

Tipos primitivos 
As variaveis em Javascript podem guardar tipos de dados que chamamos de tipos primitivos. 
Variaveis podem guardar valores dos tipos: Boolean; null; undefined; number, string, array, Object, Function. 

O que são variaveis?
São dados que variam. 
Como se declaram?

var: escopo global e local, pode ter seu valor alterado, se não tiver um valor inicial será tratada como null; 
let: escopo local de bloco, pode ter seu valor alterado, se não tiver um valor inicial será tratada como null;
const: escopo local de bloco, somente leitura, o valor inicial é obrigatório e não pode ser alterado.

O que é escopo?
O escopo em Javascript define a limitação e visibilidade de um bloco de código. 

Escopo Global - quanto a variável é declarada fora de qualquer bloco, sua visibilidade fica disponivel em todo o código. 
Escopo Local - quando a variavel é declarada dentro de um bloco, sua visibilidade pode ficar disponivel ou não. 

Regras de Uso de Variáveis

- Iniciar com letras, unerscore_ou cifrão $, Não iniciar com número.
- Não usar espaços (use o camelCase ou _); 
- Não usar palavras reservadas; 
- Declarar variáveis no topo do bloco de código;

ATRIBUIÇÃO

O sinal de igualdade "=" em JavaScript, significa atribuição. 

COMPARAÇÃO

Para fazermos uma comparação de valores em JavaScript usamos "=="; 

COMPARAÇÃO IDÊNTICA 
Para fazermos uma comparação de valores e tipos em JavaScript usamos "===";

OPERADORES ARITMÉTICOS
São tipos de operadores matemáticos com valor numérico: 
+adição; 
-subtração; 
*multiplicação;
/divisão real;
%divisão inteira;
**potenciação;

OPERADORES RELACIONAIS
São tipos de operadores que consultam a relação entre valores: 
>maior que; 
<menor que;
>= maior ou igual a;
<= menor ou igual a;

OPERADORES LÓGICOS
São tipos de operadores que consultam valores lógicos:

&& - "e" - considera que todos os valores sejam true; 
|| - "ou" - considera que qualquer valor seja true;
! - "não" - inverte o valor de true para false ou vice-versa.

O QUE SÃO VETORES OU ARRAYS?
Arrays são um tipo de lista, ou matriz de vaiáveis, onde cada variável possui um índice. Os valores podem ser de vários tipos. 
Imagina que um array é uma caixa com várias outras caixas dentro e cada uma contendo algum valor. 
O array deve ser declarados entre colchetes "[]" e podem guardar qualquer valor dentro de seus índices: inclusive outros arrays.
OBs.: O índice só é acessado por um número inteiro, onde 0 é o primeiro índice. Cada índice é separado por vírgula. 
COMO MANIPULAR ARRAYS?
Ao ser declarado, o Array traz consigo uma série de métodos para manipulá-lo. 
ForEach() - executa uma função de cada item de um array; 
push() - add item no final do array;
pop() - remove item no final do array;
shift() - remove item no início do array
unshift() - add item no inicio da array; 
indexOf() - retorna o índice de um valor. 
splice() - remove ou substitui um item pelo índice; 
slice() - retorna uma parte de um array existente;

Objetos 
Dados que possuem propriedades e valores que definem suas características. Deve ser declarado entre chaves "{}". 
Como manipular os objetos?
As propriedades de objetos podem ser atribuídas às variáveis, facilitando a manipulação do objeto. Chamamos isso de desestruturação.
outra forma de fazer desestruturação de objetos é utilizando chaves.
O QUE SÃO OBJETOS?
DESTRUTURANDO OBJETOS


